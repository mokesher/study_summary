1、文件权限 
	d 目录。
	l 符号链接(指向另一个文件)。
	s 套接字文件。
	b 块设备文件。
	c 字符设备文件。
	p 命名管道文件。
	- 普通文件，或者更准确地说，不属于以上几种类型的文件。
	
	文件属主权限	组用户权限	其他用户权限
		r w - 			r- - 		r—
		
	r 读权限	w 写/更改权限	x 执行该脚本或程序的权限
	chmod [who] operator [permission] filename
	chmod [mode] file	例：chmod 777 file(rwx rwx rwx)
	八进制数含义
	0 0 1 0 同组用户可执行
	0 0 0 4 其他用户可读
	0 0 0 2 其他用户可写
	0 0 0 1 其他用户可执行
	

	
2、标准输入、输出和错误
	当我们在shell中执行命令的时候，每个进程都和三个打开的文件相联系，并使用文件描述符来引用这些文件。由于文件描述符不容易记忆， shell同时也给出了相应的文件名。
	下面就是这些文件描述符及它们通常所对应的文件名：

	文件文件描述符
	输入文件—标准输入0
	输出文件—标准输出1
	错误输出文件—标准错误2
	系统中实际上有1 2个文件描述符，但是正如我们在上表中所看到的， 0、1、2是标准输入、输出和错误。可以任意使用文件描述符3到9。	
	
	命令1 && 命令2
		这种命令执行方式相当地直接。&&左边的命令（命令1）返回真(即返回0，成功被执行）后，&&右边的命令（命令2）才能够被执行；换句话说，“如果这个命令执行成功& &那么执行这个命令”。
		
	例子；$ mv /apps/bin /apps/dev/bin && rm -r /apps/bin
	
	命令1 || 命令2
		| |的作用有一些不同。如果| |左边的命令（命令1）未执行成功，那么就执行| |右边的命令（命令2）；或者换句话说，“如果这个命令执行失败了|| 那么就执行这个命令”。
			

3、基本元字符集及其含义

	^ 只只匹配行首
	$ 只只匹配行尾
	* 只一个单字符后紧跟*，匹配0个或多个此单字符
	[ ] 只匹配[ ]内字符。可以是一个单字符，也可以是字符序列。可以使用-
	表示[ ]内字符序列范围，如用[ 1 - 5 ]代替[ 1 2 3 4 5 ]
	\ 只用来屏蔽一个元字符的特殊含义。因为有时在s h e l l中一些元字符有
	特殊含义。\可以使其失去应有意义
	. 只匹配任意单字符
	p a t t e r n \ { n \ } 只用来匹配前面p a t t e r n出现次数。n为次数
	p a t t e r n \ { n，\ } m 只含义同上，但次数最少为n
	p a t t e r n \ { n，m \ } 只含义同上，但p a t t e r n出现次数在n与m之间
	
	
4、特殊变量
	Linux系统规定的特殊变量如下：
	$0：存放正在执行程序的路径和文件名。
	$#：存放传递给正在执行程序的参数个数。
	$*：存放所有传递给正在执行程序的参数。
	$@：同$*。
	$$：存放当前进程的进程号。
	$?：存放最后一个执行完的命令或程序的退出状态编号，0表示成功，1表示有错误。
	参数
	Shell程序运行时可以指定多个参数，参数之间用空格分开，程序中引用参数的方法为$1、$2、$3等，其中“$1”为第一个参数，“$2”为第二个参数，依次类推。
			
			
		
shell脚本中的if 参数-a至-z:  https://blog.csdn.net/shenhuxi_yu/article/details/53047012

	shell中判断前一个命令是否执行成功
		if [ $? -ne 0 ]; then
			echo "fail"
		else
			echo "success"
		fi

shell中：

	-eq　　等于
	-ne　　不等于
	-gt　　大于
	-lt　　小于
	ge　　大于等于
	le　　小于等于
		
	每一条基本命令执行后都有一个返回码，该返回码是用$?表示，执行成功的返回码是0，例如：

	if [ $? -ne 0 ];then
		上一命令执行失败时的操作

	else
		上一命令执行成功时的操作
	fi


	
在linux里，source、sh、bash、./都可以执行shell script文件
	1、source
		source a.sh
		在当前shell内去读取、执行a.sh，而a.sh不需要有"执行权限"
		source命令可以简写为"."
		. a.sh
		注意：中间是有空格的。
	 
	2、sh/bash
		sh a.sh
		bash a.sh
		都是打开一个subshell去读取、执行a.sh，而a.sh不需要有"执行权限"
		通常在subshell里运行的脚本里设置变量，不会影响到父shell的。
	 
	3、./
		./a.sh
		#bash: ./a.sh: 权限不够
		chmod +x a.sh
		./a.sh
		打开一个subshell去读取、执行a.sh，但a.sh需要有"执行权限"
		可以用chmod +x添加执行权限
			
			
local
global
关于局部变量和全局变量： 
（1）shell 脚本中定义的变量是global的，作用域从被定义的地方开始，一直到shell结束或者被显示删除的地方为止。 
（2）shell函数定义的变量也是global的，其作用域从 函数被调用执行变量的地方 开始，到shell或结束或者显示删除为止。函数定义的变量可以是local的，其作用域局限于函数内部。但是函数的参数是local的。 
（3）如果局部变量和全局变量名字相同，那么在这个函数内部，会使用局部变量。	
	
	
shift命令用于对参数的移动(左移)，通常用于在不知道传入参数个数的情况下依次遍历每个参数然后进行相应处理（常见于Linux中各种程序的启动脚本）。
每次运行shift(不带参数的),销毁一个参数，后面的参数前移
Shift命令一次移动参数的个数由其所带的参数指定。
例如当shell程序处理完前九个命令行参数后，可以使用shift 9命令把$10移到$1
	
	
tr（translate缩写）主要用于删除文件中的控制字符，或进行字符转换。
	
	
	
	
函数
	demoFun(){
    echo "这是我的第一个 shell 函数!"
}


	
条件语句  ：		
	if-then
		if command
		then
			command
		fi

	if-then-else
		if command
		then
			command
		else
			command
		fi

	if-then-else
		if command
		then
			command
		elif command
		then
			command
		fi

	
循环语句
https://blog.csdn.net/taiyang1987912/article/details/38929069
	当型循环：while循环、for循环  	直到型循环：until
	
	for循环：
		for varible1 in {1..5}
		#for varible1 in 1 2 3 4 5
		do
			 echo "Hello, Welcome $varible1 times "
		done
	
		跳步：
		for i in {1..100..2}
		do
			echo "Hello,Welcome $i times"
		done
	
		类c:
		sum=0
		for(( i = 1; i <= 100; i = i + 2 ))
		do
			 let "sum += i"
		done

		echo "sum=$sum"
	
	while循环:
		sum=0
		i=1
		while(( i <= 100 ))
		do
			 let "sum+=i"
			 let "i += 2"   
		done

		echo "sum=$sum"
		
	until 循环执行一系列命令直至条件为 true 时停止。
	until condition
	do
		command
	done
	
	 case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。
	
	
基础命令：
	cd:
		cd - :变更工作目录到上一次目录。
		
	ps：查看进程
		ps -ef
		ps命令列出进程时，它无法确定该进程是运行在前台还是后台
		kill：杀死后台进程
		
	echo：使用echo命令可以显示文本行或变量，或者把字符串输入到文件。它的一般形式为：echo string
		echo命令有很多功能，其中最常用的是下面几个：
			\c 不换行。
			\f 进纸。
			\t 跳格。
			\n 换行。
				
		Linux:用 -e选项才能使转义符生效, 用 -n选项来禁止echo命令输出后换行
		
	read	 				用read语句从键盘或文件的某一行文本中读入信息，并将其赋给一个变量.如果只指定了一个变量，那么read将会把所有的输入赋给该变量，直至遇到第一个文件结束符或回车。
		它的一般形式为：read varible1 varible2 ...
	
	cat：查看显示文件
		-v 显示控制字符
	
	
	管道 | ：可以通过管道把一个命令的输出传递给另一个命令作为输入。
		ls | grep test.log
	
	tee：命令作用可以用字母T来形象地表示。它把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。如果希望在看到输出的同时，也将其存入一个文件，那么这个命令再合适不过了。
		形式：tee -a files		-a表示追加到文件末尾。
	
	当执行某些命令或脚本时，如果希望把输出保存下来，tee命令非常方便。
		例子，我们使用w h o命令，结果输出到屏幕上，同时保存在who.out文件中：
		$ who | tee who.txt

	
	test：使用命令test进行条件判断的格式为：test条件；使用运算符“[]”进行条件判断的格式为：[条件表达式]，其中“条件表达式”与“[”和“]”之间需要留出空格。判断结果保存在环境变量“$?”中，当“$?”为0时表示条件成立，否则表示条件不成立。

	
	export：用于设置或显示环境变量   	export [-fnp][变量名称]=[变量设置值]       export可新增，修改或删除环境变量，供后续执行的程序使用。同时，重要的一点是，export的效力仅及于该次登陆操作。注销或者重新开一个窗口，export命令给出的环境变量都不存在了。


	seq  :产生从某个数到另外一个数之间的所有整数
	
	curl：Shell script中 ，curl命令可以下载文件，通过重定向符 > 存储到文件中，脚本第一行，curl 的参数 为—header，也可以缩写为-h，表示请求头，传递Token验证通过认证，接下来跟网址，命令格式为： curl –header “具体Token”“ 网址”。
	
	cut：以行为单位获取指定长度的列。
	
	mkdir
		-p: 创建多级目录
		
	chmod
		chmod a+x : 增加所有人可执行权限
	
	dos2unix
		格式化
	
	ftp
		ftp -p -n -d -v -i $HOST_IP << END_SCRIPT
		quote USER $USER
		quote PASS $PASS
		mkdir ${directory}
		cd ${directory}
		binary
		put ${package_name}
		quit
		END_SCRIPT
		
	du:磁盘使用空间
		-s:仅显示总计
		-h:
		
	tar
		-xzvf:解压
		-c:指定解压目录
		
	wc
		-c:统计字节数
		-l:统计行数
		-w:统计字数
	
复杂命令：	

	find
		find pathname -options [-print -exec -ok]
		pathname find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。
		-print find命令将匹配的文件输出到标准输出。
		-exec find命令对匹配的文件执行该参数所给出的s h e l l命令。相应命令的形式为' c o m m -
		and' {} \;，注意{ }和\；之间的空格。
		-ok 和- e x e c的作用相同，只不过以一种更为安全的模式来执行该参数所给出的s h e l l命令，
		在执行每一个命令之前，都会给出提示，让用户来确定是否执行。
		
		参数：
		-name 按照文件名查找文件。
		-perm 按照文件权限来查找文件。
		-prune 使用这一选项可以使f i n d命令不在当前指定的目录中查找，如果同时使用了- d e p t h
		选项，那么- p r u n e选项将被f i n d命令忽略。
		-user 按照文件属主来查找文件。
		-group 按照文件所属的组来查找文件。
		-mtime -n +n 按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内，+ n
		表示文件更改时间距现在n天以前。F i n d命令还有- a t i m e和- c t i m e选项，但它们都和- m 
		
		time选项
		-nogroup 查找无有效所属组的文件，即该文件所属的组在/ e t c / g r o u p s中不存在。
		-nouser 查找无有效属主的文件，即该文件的属主在/ e t c / p a s s w d中不存在。
		-newer file1 ! file2 查找更改时间比文件f i l e 1新但比文件f i l e 2旧的文件。
		-type 查找某一类型的文件，诸如：
			b - 块设备文件。
			d - 目录。
			c - 字符设备文件。
			p - 管道文件。
			l - 符号链接文件。
			f - 普通文件。
		-size n[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。
		-depth 在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。
		-fstype 查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件
		/etc/fstab中找到，该配置文件中包含了本系统中有关文件系统的信息。
		-mount 在查找文件时不跨越文件系统mount点。
		-follow 如果f i n d命令遇到符号链接文件，就跟踪至链接所指向的文件。
		-cpio 对匹配的文件使用c p i o命令，将这些文件备份到磁带设备中。
		
		例： find /usr/bin -type f -name "*.log" 
		
		
		
	Linux 三剑客	
			
		grep
		  grep [选项]基本正则表达式[文件]
		常用的g r e p选项有：
			-c 只输出匹配行的计数。
			-i 不区分大小写（只适用于单字符）。
			-h 查询多文件时不显示文件名。
			-l 查询多文件时只输出包含匹配字符的文件名。
			-n 显示匹配行及行号。
			-s 不显示不存在或无匹配文本的错误信息。
			-v 显示不包含匹配文本的所有行。
			
		awk:
			awk [选项参数] 'script' var=value file(s)
			或
			awk [选项参数] -f scriptfile var=value file(s)
				-F fs or --field-separator fs
				指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。
				例： $  awk -F , '{print $1,$2}' log.txt
						
		sed
		
			
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
