基础：
	数据类型
	  list = []
		len(list)
		list.append("li")
		list.pop()   //尾部删除
		list.extend(["1","2"])  //末尾增加数据
		list.remove("li")       //删除特定数据
		list.insert(0,"li")
		
		
	迭代器iterator
		__iter__
	
	生成器generator
		yeild

return self:返回的是类的实例	<class '__main__.Fun'>

	
	
	
基本模块：
	json
		dumps:把数据类型转换为字符串
		loads:把字符串转换为数据类型
		
		dump:把数据类型转换为字符串并存储在文件中
			json.dump(data,w)
		load:把文件打开从字符串转换为数据类型
		
	yaml
		object_pairs_hook=OrderDict:读取json保持有序
		default_flow_style=False:保持原格式
	time
		time.strftime('%Y-%M-%D %H:%M:%S,time.localtime(time.time())')
		
	re
		Rule_Regex = re.compile(r'rule')
		Match = Rule_Regex.search("Str")
		Match.groups()
		
		字符|称为“管道”。希望匹配许多表达式中的一个时，就可以使用它。例如，正则表达式r'Batman|Tina Fey'将匹配'Batman'或'Tina Fey'。
		?:零次或一次(声明非贪心匹配)
		*:匹配零次或多次
		+（加号）:匹配一次或多次
		.（句点）字符称为“通配符”。它匹配除了换行之外的所有字符
		(Hi){3,5}  : 匹配特定次数,例匹配Hi 3-5次
	
	sys
		sys.argv:从程序外部向程序内传递参数，列表[]格式，第一个参数argv[0]为文件名
		sys.path:获取指定模块搜索路径的字符串集合，可以将模块写好放到路径下，import可以正确找到
		sys.setdefaultenconding("utf-8"):设置系统默认编码
		sys.exit():0正常退出
		
	os	
		os.system():调用命令行
		os.getcwd():得前工作路径的字符串
		os.makedirs():创建新文件夹
		os.path.abspath(path)将返回参数的绝对路径的字符串。这是将相对路径转换为绝对路径的简便方法。
		os.unlink(path)将删除path 处的文件。
		os.rmdir(path)将删除path 处的文件夹。该文件夹必须为空，其中没有任何文件和文件夹。
		shutil.rmtree(path)将删除path 处的文件夹，它包含的所有文件和文件夹都会被删除。
		os.path.exists(path) :如果path存在返回True
		os.getenv("path"):获取某个环境变量值
		os.path.dirname :测试脚本所在位置，结合os.path.abspath()使用
		
		os.system():执行shell命令，无返回值
		os.popen(cmd,mode='r',buffering=-1)：从命令cmd打开一个管道，返回值是连接管道的文件对象，通过该对象，读写
			cmd:执行命令
			mode:模式权限，r,w
			bufseze:缓冲区大小，0无缓冲，1行缓冲，负数系统默认值
		
		commands.getstatusoutput():获取返回值和输出
		
		subprocess
			result = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
			description = str(result.communicate()[0], encoding="utf-8")
			return_code = result.wait()
			if return_code == 0:
				return True,description
			return False,"failed"
		
		
		
	readline():每运行一次读取一行
	readlines():读取所有行
	
	zip
		zip([iterable, ...])
		返回一个对象
		zip(*ziped) : 相反操作，解包
		
	map
		map(function, iterable, ...)
		Python 2.x 返回列表，Python 3.x 返回迭代器
	
	ssl
		通过ssl verify：ssl._create_default_https_context = ssl._create_unverified_context
		
		
	enumerate	
		enumerate(sequence, [start=0])：sequence -- 一个序列、迭代器或其他支持迭代对象。start -- 下标起始位置。
		反向遍历 ：enumerate(seq[::-1])
				
	Ascii
		ord() ：字符转Ascii
		chr() ：Ascii转字符
		
	进制
		十进制数为：dec
		bin(dec)：转换为二进制
		oct(dec):转换为八进制 
		hex(dec):转换为十六进制
		
	replace
		str.replace(old,new[,max])
			max -- 替换不超过max次
			
	import
		https://blog.csdn.net/winycg/article/details/78512300
	
	zipfile: zipfile.ZipFile(file,mode,ZIP_DEFLAED)
		https://segmentfault.com/a/1190000007967852
		
	yapf:format code工具
		yapf -i x.py
		
	2to3.py
		python 2to3.py -w test.py
	
	str()与repr()函数区别
		repr:保留对象的数据类型信息
		
	chardet:查看字符编码
	
	Event:
		set():信号标志为True
		isSet():判断标志的状态
		clear():清除Event对象内部的标志(设为False)
		wait():信号标志为False，阻塞线程
		
	ast.literal_eval():解析为python对象(相比eval，更安全)
	
	
库：
	requests
	方法
		requests.request(get|post|method,url,*args,**kwargs)
		requests.get()
		requests.head()
		requests.post()
		requests.put()
		requests.patch()
		requests.delete()
	*args
		verify=False :取消认证
	**kwargs
		headers :请求头，字典格式{}
		proxies:代理，字典格式{}
		data:post请求提交的参数，字典格式{}
	response = requests.get(url)
		response属性
		r.status_code :状态码
		r.encoding :
		r.apparent_encoding
		r.text  :unicode数据格式
		r.content :bytes型二进制数据
		
	requests.Session() :会话对象，跨请求保持某些参数，比如cookie
	requests.package.urllib3.disable_warnings():忽略警告
	
	url传递参数
		payload = {'wd':'moke','r':100}
		r = requests.get("http://www.baidu.com/s",params=payload)
	
	身份认证
		基本身份认证（HTTP Basic Auth):
			r = requests.get(url,auth=HTTPBasicAuth('usr','passwd'))
			r = requests.get(url,auth=('usr','passwd')) #简写
		摘要式认证
			requests.get(url,auth=HTTPDigestAuth('user','pass')
			
https://blog.csdn.net/shanzhizi/article/details/50903748
		
		
	xpath、BeautifulSoup
	from bs4 import BeautifulSoup
	实例化：soup = BeautifulSoup(html,fromEncoding="GBK")
	方法
		soup.prettify():纠正HTML格式
		soup.find_add(name,attrs,recursive,string,**kwargs)
	属性
		Tag:
			soup.title.name
			soup.attrs:
		soup.title
		soup.title.string
	
推导式：
	列表推导式
	
	
	
	字典推导式
	
	
	
	集合推导式
	

	
	


	


	

框架

	django
		创建项目：django-admin startproject HelloWorld
		项目的目录结构：
			|-- HelloWorld
			|   |-- __init__.py
			|   |-- settings.py
			|   |-- urls.py
			|   `-- wsgi.py
			`-- manage.py
			
		HelloWorld: 项目的容器。
		manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。
		HelloWorld/__init__.py: 一个空文件，告诉 Python 该目录是一个 Python 包。
		HelloWorld/settings.py: 该 Django 项目的设置/配置。
		HelloWorld/urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站"目录"。
		HelloWorld/wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。
