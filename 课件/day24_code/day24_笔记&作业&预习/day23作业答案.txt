1、今天属于复习内容，利用今天的时间，复习整理这几日所学内容!
	a、大串中查找子串出现的次数
		public class SubStringDemo {

		public static void main(String[] args) {
			// 查找字串在大串中出现的次数
			String str = "hanbasdnbafllgnbahjnbakqqqqlnbaxnbai";
			String regex = "nba";
			// 方式1
			int count = getCount1(str, regex);
			
			// 方式2
			int count2 = getCount2(str, regex);
			System.out.println(count);
			System.out.println(count2);
		}

		/*
		 * 方式2： 不截取字符串，逐渐缩小查找范围
		 */
		private static int getCount2(String str, String regex) {
			// 定义统计变量
			int count = 0;
			// 定义子串在大串中第一次出现的索引
			int index = 0;
			// 从每次找到的小串后，开始下一次查找
			while ((index = str.indexOf(regex, index)) != -1) {
				// 如果找到小串，下一次开始查找的起始索引是小串出现的索引+小串的长度
				index = index + regex.length();
				// 统计变量++
				count++;
			}
			return count;
		}

		/*
		 * 方式1：查找到小串后将已经查询的部分截取掉。
		 * 返回值：统计变量的值 int 
		 * 参数列表：大串和小串
		 * 注：这种方式会在常量池产生很多截取出来的字符串数据，浪费内存
		 */
		public static int getCount1(String maxString, String minString) {
			// 定义统计变量
			int count = 0;
			// 定义小串在大串中第一次出现的索引
			int index = 0;
			// 查找赋值并判断，如果返回值不是-1，说明小串在大串中是存在的。
			while ((index = maxString.indexOf(minString)) != -1) {
				// 统计变量++
				count++;
				// 把查找过的数据给截取掉,重新赋值给大串
				maxString = maxString.substring(index + minString.length());
			}
			return count;
		}
	}
	
	b、打印出字符串"abbbbbccccdddee"中每个字符出现的次数，要求输出格式："a(1)b(5)c(4)d(3)e(2)"，并将结果写入文件。
		public class Test5 {

			public static void main(String[] args) throws IOException {
				// 1,定义一个需要被统计字符的字符串
				String s = "abbbbbccccdddee";
				// 2,将字符串转换为字符数组
				char[] arr = s.toCharArray();
				// 3,定义双列集合,存储字符串中字符以及字符出现的次数
				TreeMap<Character, Integer> map = new TreeMap<>();
				// 4,遍历字符数组获取每一个字符,并将字符存储在双列集合中
				for (char c : arr) {
					// 5,存储过程中要做判断,如果集合中不包含这个键,就将该字符当作键,值为1存储,如果集合中包含这个键,就将值加1存储
					if (!map.containsKey(c)) { // 如果不包含这个键
						map.put(c, 1);
					} else {
						map.put(c, map.get(c) + 1);
					}
				}
				// 6,遍历集合将键和值拼接起来
				StringBuilder sb = new StringBuilder();
				for (Character key : map.keySet()) { // hm.keySet()代表所有键的集合
					sb.append(key + "(" + map.get(key) + ")");
				}
				
				// 输出结果
				System.out.println(sb);
				
				// 创建输出流对象写入文件
				BufferedWriter bw = new BufferedWriter(new FileWriter("result.txt"));
				
				bw.write(sb.toString());
				
				bw.close();
			}
		}
		
	3、将指定文件夹下（包含子文件夹）所有的.java文件复制到指定目录（目标目录为单级目录即可）。
		public class Test6 {

			public static void main(String[] args) throws IOException {
				File src = new File("D:\\src"); // 源文件夹
				File dest = new File("D:\\dest"); // 目标文件夹
				if (src.equals(dest)) {
					System.out.println("目标文件夹是源文件夹的子文件夹");
				} else {
					copy(src, dest);
				}
			}

			/*
			 * 把其中一个文件夹中(包含内容)拷贝到另一个文件夹中 1,返回值类型void 2,参数列表File src,File dest
			 */
			public static void copy(File src, File dest) throws IOException {
				
				// 1,获取原文件夹中所有的文件和文件夹,存储在File数组中
				File[] subFiles = src.listFiles();
				// 2,遍历数组
				for (File subFile : subFiles) {
					// 3,如果是文件并且是以.java结尾，就用io流读写
					if (subFile.isFile()) {
						// 过滤符合条件的文件，以.java结尾
						if (subFile.getName().endsWith(".java")) {

							BufferedInputStream bis = new BufferedInputStream(
									new FileInputStream(subFile));

							// 目标文件
							File fff = new File(dest, subFile.getName()); // 想复制到的目标文件夹
																			// + 文件名字

							BufferedOutputStream bos = new BufferedOutputStream(
									new FileOutputStream(fff));

							int b;
							while ((b = bis.read()) != -1) {
								bos.write(b);
							}

							bis.close();
							bos.close();
						}
						// 4,如果是文件夹就递归调用
					} else {
						copy(subFile, dest);
					}
				}
			}
		}
	
	
2、逻辑思考题:
(1)你有一桶果冻，其中有黄色、绿色、红色三种，每种颜色的果冻有两个，闭上眼睛抓取同种颜色的两个。抓取多少个就可以确定你肯定有两个同一颜色的果冻？
	2次(注意每次拿去两个)

(2)如果你有无穷多的水，一个3公升的提捅，一个5公升的提捅，两只提捅形状上下都不均匀，问你如何才能准确称出4公升的水？
	a:将5公升桶供盛满
	b:将5公升桶倒入3公升桶，剩余2升。
	c:将3公升桶倒掉
	d:将5公升桶中剩余的2升谁倒入3升桶
	e:将5公升桶供盛满
	f:用5升桶将3升桶倒满，此时5升桶剩余水量为4升。
	
(3)有8个颜色，大小一样的小球，其中的一个质量和比其他的重，给你一个天平，你几次就可以称出那个重的球。(不要想着自己用手拿)
	2次(技巧：不必称所有的小球)
	a:天平两边各放3个.如果天平平衡，则重的那个在剩余的两个里面，再将剩余的两个放到天平两端，即可获取。
	b:如果天平不平衡，则重的那个在下沉的3个里面。再任取此3个中的2个放到天平两端，同理，如果平衡，剩余的那个即是。如果不平，下沉的一端即是。
